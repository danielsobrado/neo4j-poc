package com.jds.neo4j.reactive.service;

import com.google.protobuf.InvalidProtocolBufferException;
import com.jds.neo4j.reactive.graphs.model.ExchangeNode;
import com.jds.neo4j.reactive.repository.ExchangeRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@DisplayName("Exchange Service Test")
class ExchangeServiceTest {

    private ExchangeService exchangeService;

    @Mock
    private ExchangeRepository exchangeRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        exchangeService = new ExchangeServiceImpl(exchangeRepository);
    }

    @Test
    void testGetAllExchanges() {
        ExchangeNode exchangeNode = new ExchangeNode();
        when(exchangeRepository.findAll()).thenReturn(Flux.just(exchangeNode));

        Flux<ExchangeNode> exchanges = exchangeService.getAllExchanges();

        verify(exchangeRepository, times(1)).findAll();
        Assertions.assertNotNull(exchanges);
    }

    @Test
    void testGetExchangeById() {
        Long id = 1L;
        ExchangeNode exchangeNode = new ExchangeNode();
        when(exchangeRepository.findById(id)).thenReturn(Mono.just(exchangeNode));

        Mono<ExchangeNode> exchange = exchangeService.getExchangeById(id);

        verify(exchangeRepository, times(1)).findById(id);
        Assertions.assertNotNull(exchange);
    }

    @Test
    void testCreateExchangeWithJson() throws InvalidProtocolBufferException {
        String exchangeJson = "{\"id\":1,\"name\":\"Exchange1\",\"country\":\"Country1\",\"code\":\"CODE1\"}";
        ExchangeNode exchangeNode = new ExchangeNode();
        when(exchangeRepository.save(any(ExchangeNode.class))).thenReturn(Mono.just(exchangeNode));

        Mono<ExchangeNode> exchange = exchangeService.createExchange(exchangeJson);

        verify(exchangeRepository, times(1)).save(any(ExchangeNode.class));
        Assertions.assertNotNull(exchange);
    }

    @Test
    void testCreateExchange() {
        ExchangeNode exchangeNode = new ExchangeNode();
        when(exchangeRepository.save(any(ExchangeNode.class))).thenReturn(Mono.just(exchangeNode));

        Mono<ExchangeNode> exchange = exchangeService.createExchange(exchangeNode);

        verify(exchangeRepository, times(1)).save(any(ExchangeNode.class));
        Assertions.assertNotNull(exchange);
    }

    @Test
    void testUpdateExchange() {
        Long id = 1L;
        ExchangeNode existingExchange = new ExchangeNode();
        existingExchange.setId(id);
        existingExchange.setName("Exchange1");
        existingExchange.setCountry("Country1");
        existingExchange.setCode("CODE1");
        ExchangeNode updatedExchange = new ExchangeNode();
        updatedExchange.setId(id);
        updatedExchange.setName("Exchange2");
        updatedExchange.setCountry("Country2");
        updatedExchange.setCode("CODE2");
        when(exchangeRepository.findById(id)).thenReturn(Mono.just(existingExchange));
        when(exchangeRepository.save(any(ExchangeNode.class))).thenReturn(Mono.just(updatedExchange));

        Mono<ExchangeNode> exchange = exchangeService.updateExchange(id, updatedExchange);

        verify(exchangeRepository, times(1)).findById(id);
        verify(exchangeRepository, times(1)).save(any(ExchangeNode.class));
        Assertions.assertNotNull(exchange);
    }

    @Test
    void testDeleteExchange() {
        // Set up test data
        Long exchangeId = 123L;
        ExchangeNode exchangeNode = new ExchangeNode(exchangeId, "Test Exchange", "US", "TEX");

        // Set up mock behavior
        when(exchangeRepository.findById(exchangeId)).thenReturn(Mono.just(exchangeNode));
        when(exchangeRepository.deleteById(exchangeId)).thenReturn(Mono.empty());

        // Invoke the method being tested
        Mono<Void> result = exchangeService.deleteExchange(exchangeId);

        // Verify the result
        StepVerifier.create(result)
                .verifyComplete();

        // Verify that the repository method was called
        verify(exchangeRepository, times(1)).findById(exchangeId);
        verify(exchangeRepository, times(1)).deleteById(exchangeId);
    }

}


